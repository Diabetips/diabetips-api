"/v1/food":
  get:
    security:
      - OAuth2:
          - "food"
    tags:
      - "Recipes"
    summary: "Get all food items"
    description: |
      Get a list of all food items available.

      Implements [Paging](#tag/Paging)
    parameters:
      - $component: "queries:name.yml:NameQuery"
      - $component: "queries:code.yml:CodeQuery"
      - $component: "queries:paging.yml:PageQuery"
      - $component: "queries:paging.yml:SizeQuery"
    responses:
      200:
        description: "List of all available food items"
        headers:
          "X-Pages":
            schema:
              $component: "schemas:paging.yml:PagesHeader"
        content:
          application/json:
            schema:
              type: array
              items:
                $component: "schemas:food.yml:Food"
"/v1/food/{food_id}":
  parameters:
    - $component: "parameters:food_id.yml:FoodId"
  get:
    security:
      - OAuth2:
          - "food"
    tags:
      - "Recipes"
    summary: "Get food item"
    description: |
      Get the food item with the specified ID.
    responses:
      200:
        description: "The food item's data"
        content:
          application/json:
            schema:
              $component: "schemas:food.yml:Food"
      404:
        description: "No food with the specified ID was found"
        content:
          application/json:
            schema:
              $component: "schemas:error.yml:ErrorFoodNotFound"
"/v1/food/{food_id}/picture":
  parameters:
    - $component: "parameters:food_id.yml:FoodId"
  get:
    security:
      - OAuth2:
          - "food"
    tags:
      - "Recipes"
    summary: "Get food picture"
    description: |
      Get the picture of the food with the specified ID.

      The returned picture's dimensions will always be fit to 400 pixels.
    responses:
      200:
        description: "The food item's picture"
        content:
          image/jpeg:
            schema:
              type: "string"
              format: "binary"
      404:
        description: "No food with the specified ID was found"
        content:
          application/json:
            schema:
              $component: "schemas:error.yml:ErrorFoodNotFound"
"/v1/recipes":
  get:
    security:
      - OAuth2:
          - "recipe:read"
    tags:
      - "Recipes"
    summary: "Get all recipes"
    description: |
      Get a list of all the recipes available.

      Implements [Paging](#tag/Paging)
    parameters:
      - $component: "queries:name.yml:NameQuery"
      - $component: "queries:author.yml:AuthorQuery"
      - $component: "queries:paging.yml:PageQuery"
      - $component: "queries:paging.yml:SizeQuery"
    responses:
      200:
        description: "List of all available recipes"
        headers:
          "X-Pages":
            schema:
              $component: "schemas:paging.yml:PagesHeader"
        content:
          application/json:
            schema:
              type: "array"
              items:
                $component: "schemas:recipe.yml:Recipe"
  post:
    security:
      - OAuth2:
          - "recipe:write"
    tags:
      - "Recipes"
    summary: "Create recipe"
    description: |
      Create a recipe from the specified information and ingredients list.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $component: "schemas:recipe.yml:Recipe"
    responses:
      200:
        description: "The recipe was created"
        content:
          application/json:
            schema:
              $component: "schemas:recipe.yml:Recipe"
      404:
        description: "No food with the specified ID from the list of ingredients was found"
        content:
          application/json:
            schema:
              $component: "schemas:error.yml:ErrorFoodNotFound"
"/v1/recipes/{recipe_id}":
  parameters:
    - $component: "parameters:recipe_id.yml:RecipeId"
  get:
    security:
      - OAuth2:
          - "recipe:read"
    tags:
      - "Recipes"
    summary: "Get recipe"
    description: |
      Get the recipe with the specified ID.
    responses:
      200:
        description: "The recipe's data"
        content:
          application/json:
            schema:
              $component: "schemas:recipe.yml:Recipe"
      404:
        description: "No recipe with the specified ID was found"
        content:
          application/json:
            schema:
              $component: "schemas:error.yml:ErrorRecipeNotFound"
  put:
    security:
      - OAuth2:
          - "recipe:write"
    tags:
      - "Recipes"
    summary: "Update recipe"
    description: |
      Update the recipe with the specified ID.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $component: "schemas:recipe.yml:Recipe"
    responses:
      200:
        description: "The updated recipe's data"
        content:
          application/json:
            schema:
              $component: "schemas:recipe.yml:Recipe"
      404:
        description: |
          Either:
            * No recipe with the specified ID was found
            * No food with the specified ID from the list of ingredients was found
        content:
          application/json:
            schema:
              $component: "schemas:error.yml:ErrorRecipeNotFound"
  delete:
    security:
      - OAuth2:
          - "recipe:write"
    tags:
      - "Recipes"
    summary: "Remove recipe"
    description: |
      Remove the recipe with the specified ID.
    responses:
      204:
        description: "The recipe was removed"
      404:
        description: "No recipe with the specified ID was found"
        content:
          application/json:
            schema:
              $component: "schemas:error.yml:ErrorRecipeNotFound"
"/v1/recipes/{recipe_id}/picture":
  parameters:
    - $component: "parameters:recipe_id.yml:RecipeId"
  get:
    security:
      - OAuth2:
          - "recipe:read"
    tags:
      - "Recipes"
    summary: "Get recipe picture"
    description: |
      Get the picture of the recipe with the specified ID.

      The returned picture's dimensions will always be fit to 400 pixels.
    responses:
      200:
        description: "The recipe's picture"
        content:
          image/jpeg:
            schema:
              type: "string"
              format: "binary"
      404:
        description: "No recipe with the specified ID was found"
        content:
          application/json:
            schema:
              $component: "schemas:error.yml:ErrorRecipeNotFound"
  post:
    security:
      - OAuth2:
          - "recipe:write"
    tags:
      - "Recipes"
    summary: "Update recipe picture"
    description: |
      Update the picture of the recipe with the specified ID.

      The `Content-Type` header is ignored, the format of the file is auto-detected.
      The supported image file formats are:
       - JPEG
       - PNG
       - WebP
       - TIFF

      The maximum file upload size is 2 MB. There are no constraints on the uploaded image's dimensions, but it will be
      resized and cropped to 400 by 400 pixels.
    requestBody:
      required: true
      content:
        "*/*":
          schema:
            type: "string"
            format: "binary"
    responses:
      204:
        description: "The recipe's picture has been updated"
      404:
        description: |
          No recipe with the specified ID was found
        content:
          application/json:
            schema:
              $component: "schemas:error.yml:ErrorRecipeNotFound"
  delete:
    security:
      - OAuth2:
          - "recipe:write"
    tags:
      - "Recipes"
    summary: "Remove recipe picture"
    description: |
      Remove the picture of the recipe with the specified ID.

      This action cannot be reverted, the recipe's picture will be reset to the default recipe picture.
    responses:
      204:
        description: "The recipe's picture has been removed"
      404:
        description: |
          No recipe with the specified ID was found
        content:
          application/json:
            schema:
              $component: "schemas:error.yml:ErrorRecipeNotFound"
"/v1/users/{uid}/recipes":
  parameters:
    - $component: "parameters:uid.yml:UID"
  get:
    security:
      - OAuth2:
          - "recipe:read"
    tags:
      - "Recipes"
    summary: "Get User's recipes"
    description: |
      Get a list of all the recipes created by the specified user.


      Implements [Paging](#tag/Paging)
    parameters:
      - $component: "queries:name.yml:NameQuery"
      - $component: "queries:paging.yml:PageQuery"
      - $component: "queries:paging.yml:SizeQuery"
    responses:
      200:
        description: "List of all recipes created by the user"
        headers:
          "X-Pages":
            schema:
              $component: "schemas:paging.yml:PagesHeader"
        content:
          application/json:
            schema:
              type: "array"
              items:
                $component: "schemas:recipe.yml:Recipe"
      404:
        description: |
          No user with the specified UID was found or the current authenticated user does not have permission to view
          them
        content:
          application/json:
            schema:
              $component: "schemas:error.yml:ErrorUserNotFound"
"/v1/users/{uid}/recipes/favorites":
  parameters:
    - $component: "parameters:uid.yml:UID"
  get:
    security:
      - OAuth2:
          - "profile:read"
    tags:
      - "Recipes"
    summary: "Get User's favorite recipes"
    description: |
      Get a list of all the favorite recipes of the specified user.
    responses:
      200:
        description: "List of all recipes favorited by the user"
        headers:
          "X-Pages":
            schema:
              $component: "schemas:paging.yml:PagesHeader"
        content:
          application/json:
            schema:
              type: "array"
              items:
                $component: "schemas:recipe.yml:Recipe"
      404:
        description: |
          No user with the specified UID was found or the current authenticated user does not have permission to view
          them
        content:
          application/json:
            schema:
              $component: "schemas:error.yml:ErrorUserNotFound"
"/v1/users/{uid}/recipes/favorites/{id}":
  parameters:
    - $component: "parameters:uid.yml:UID"
  post:
    security:
      - OAuth2:
          - "profile:write"
    tags:
      - "Recipes"
    summary: "Add favorite recipe"
    description: |
      Add recipe to the specified user's favorites
    responses:
      204:
        description: "The recipe was added to the favorites"
  delete:
    security:
      - OAuth2:
          - "profile:write"
    tags:
      - "Recipes"
    summary: "Remove favorite recipe"
    description: |
      Remove recipe from the specified user's favorites
    responses:
      204:
        description: "The recipe was removed frmo the favorites"
