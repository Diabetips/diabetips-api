# Copy and paste this file into Swagger Editor (editor.swagger.io) to visualize
# the API documentation
openapi: '3.0.0'
info:
  title: 'Diabetips API'
  description: 'This is the documentation for the Diabetips API.'
  version: '0.2.0'
  contact:
    email: 'contact@diabetips.fr'
servers:
  - url: 'https://api.diabetips.fr'
    description: 'Production server'
tags:
 - name: 'users'
   description: 'Users API'
paths:
  '/v1/users':
    get:
      summary: 'Get a list of all users'
      description: 'Get a list of all the users the current authenticated user is allowed to see.<br>*Pageable*'
      tags:
        - 'users'
      security:
        - oauth: []
      parameters:
        - $ref: '#/components/parameters/page-number'
        - $ref: '#/components/parameters/page-size'
        - $ref: '#/components/parameters/page-sort'
      responses:
        '200':
          description: 'A list of users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserOut'
    post:
      summary: 'Register a new user'
      description: >
        Register a new user account using the supplied registration information.<br>
        <h3>Validation</h3>
        The following validation rules are applied on the registration data before creating the user:<br>
        <ul>
        <li>`email` must not be null or missing and must be a valid email address</li>
        <li>`password` must not be null or missing and must be 8 characters or longer</li>
        <li>`first_name` must not be blank, null or missing</li>
        <li>`last_name` must not be blank, null or missing</li>
        </ul>
        The registration email must not be already used by another user account.
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateOrUpdate'
      responses:
        '201':
          description: 'The created user account'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        '400':
          description: 'Parameters validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 'Email address already used'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/v1/users/{uid}':
    parameters:
      - in: path
        name: uid
        description: 'The user''s UID'
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: 'Get a user'
      description: 'Get the user with the specified user ID'
      tags:
        - users
      security:
        - oauth: []
      responses:
        '200':
          description: 'The user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: 'Modify a user'
      description: >
        Modify the user with the specified user ID<br>
        The same validation rules as POST /users are applied on the user data
      tags:
        - users
      security:
        - oauth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateOrUpdate'
      responses:
        '200':
          description: 'The updated user account'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        '400':
          description: 'Parameters validation error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 'Email already taken'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: 'Delete a user account'
      description: >
        Mark a user account as deleted making it only visible to admins and support accounts
      tags:
        - users
      security:
        - oauth: []
      responses:
        '204':
          description: 'User deleted'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/v1/auth/reset-password':
    post:
      summary: 'Reset a user''s password'
      description: >
        Reset the password of the user with the specified email<br>
        A new password is randomly generated and sent to the users email<br>
        For privacy reasons, errors are **not** reported (e.g. email is not associated with any account)
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthPasswordReset'
      responses:
        '202':
          description: 'Password reset request is being processed'
components:
  parameters:
    page-number:
      in: query
      name: page
      description: 'The page number to access'
      schema:
        type: integer
        format: uint32
        default: 0
    page-size:
      in: query
      name: size
      description: 'The page size requested'
      schema:
        type: integer
        format: uint32
        default: 20
    page-sort:
      in: query
      name: sort
      description: 'A collection of sort directives in the format `($propertyName,)+[asc|desc]`'
      schema:
        type: string
  schemas:
    Error:
      type: object
      properties:
        'error':
          type: string
          example: 'example_error'
        'message':
          type: string
          example: 'Error description message'
    User.Uid:
      type: object
      properties:
        'uid':
          type: string
          format: uuid
    User.Email:
      type: object
      properties:
        'email':
          type: string
          format: email
    User.Password:
      type: object
      properties:
        'password':
          type: string
          format: password
          example: 'password123'
    User.Profile:
      type: object
      properties:
        'first_name':
          type: string
          example: 'John'
        'last_name':
          type: string
          example: 'Snow'
    UserOut:
      allOf:
       - $ref: '#/components/schemas/User.Uid'
       - $ref: '#/components/schemas/User.Email'
       - $ref: '#/components/schemas/User.Profile'
    UserCreateOrUpdate:
      allOf:
       - $ref: '#/components/schemas/User.Email'
       - $ref: '#/components/schemas/User.Password'
       - $ref: '#/components/schemas/User.Profile'
    AuthPasswordReset:
      allOf:
        - $ref: '#/components/schemas/User.Email'
  securitySchemes:
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: '/oauth/authorize'
          tokenUrl: '/oauth/token'
          refreshUrl: '/oauth/token'
          scopes: {}
        implicit:
          authorizationUrl: '/oauth/authorize'
          scopes: {}
        password:
          tokenUrl: '/oauth/token'
          refreshUrl: '/oauth/token'
          scopes: {}
